{
    "data" : [
        "\nR version 3.6.1 (2019-07-05) -- \"Action of the Toes\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin15.6.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/sciebo/SPOTSeven.d/Drittmittelprojekte.d/Utopiae.d/Irawan/ccoevolution/.RData]\n\n",
        "Registered S3 method overwritten by 'sensitivity':\n  method    from \n  print.src dplyr\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(ccoevolution2)",
        "Loading required package: foreach\n",
        "Loading required package: parallel\n",
        "Loading required package: doParallel\n",
        "Loading required package: iterators\n",
        "> ",
        "rm(list=ls())",
        "> ",
        "qq_mat <- 1:25",
        "> ",
        "RSS <- 1",
        "> ",
        "qq_mat <- (qq_mat)*8-(RSS-1)%/%4",
        "> ",
        "library('ccoevolution2')",
        "> ",
        "nVar <- 1000",
        "> ",
        "optimum <- rep(13,nVar)",
        "> ",
        "func_set <- c(f4cec,f5cec,f6cec,f7cec)",
        "> ",
        "nfunc <- length(func_set)",
        "> ",
        "ctrl <- list(lbound=rep(-100,nVar),ubound=rep(100,nVar),delta=rep(20,nVar))",
        "> ",
        "budget <- 3000000",
        "> ",
        "lbound <- rep(-100,nVar)",
        "> ",
        "ubound <- rep(100,nVar)",
        "> ",
        "delta <- rep(20,nVar)",
        "> ",
        "group_size <- c(50,25,25,100,50,25,25,700)",
        "> ",
        "for(func_index in (RSS-1)%%4+1){",
        "+ ",
        "  func <- func_set[[func_index]]",
        "+ ",
        "  res <- NULL",
        "+ ",
        "  resVal <- NULL",
        "+ ",
        "  for(qqIndex in 1:length(qq_mat)){",
        "+ ",
        "    qq <- qq_mat[qqIndex]",
        "+ ",
        "    methods <- 5",
        "+ ",
        "    seed <- ((qq-1)%/%8)*1000",
        "+ ",
        "    groupStart <- 1",
        "+ ",
        "    group <- NULL",
        "+ ",
        "    groupEnd <- 0",
        "+ ",
        "    permutation <- NULL",
        "+ ",
        "    set.seed(seed)",
        "+ ",
        "    ",
        "+ ",
        "    rotation_matrix <- matrix(numeric(1000*1000),nrow=1000)",
        "+ ",
        "    weight <- ccoevolution:::cec_weight(7)",
        "+ ",
        "    weight <- append(weight,1)",
        "+ ",
        "    ",
        "+ ",
        "    ",
        "+ ",
        "    for(i in 1:8){",
        "+ ",
        "      group <- append(group,list(groupEnd+(1:group_size[i])))",
        "+ ",
        "      permutation <- append(permutation,sample.int(group_size[i])+groupEnd)",
        "+ ",
        "      groupEnd <- groupEnd + group_size[i]",
        "+ ",
        "    }",
        "+ ",
        "    for(i in 1:7){",
        "+ ",
        "      rotation_matrix[group[[i]],group[[i]]] <- soobench:::random_rotation_matrix(group_size[i])",
        "+ ",
        "    }",
        "+ ",
        "    rotation_matrix[group[[8]],group[[8]]] <- diag(1,group_size[8])",
        "+ ",
        "    print(paste0('algo',methods))",
        "+ ",
        "    ",
        "+ ",
        "    if(methods==1){",
        "+ ",
        "      print('CCDG')",
        "+ ",
        "      a <- cc(nVar = nVar,fun=func,budget=budget,grouping_control=ctrl,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight)",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==2){",
        "+ ",
        "      print('cc_2')",
        "+ ",
        "      a <- cc_2(nVar = nVar,fun=func,budget=budget,grouping_control=ctrl,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight)",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==3){",
        "+ ",
        "      print('SACC_mustar')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='morris_mu')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==4){",
        "+ ",
        "      print('TSCC_mustar')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='morris_mu')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==5){",
        "+ ",
        "      print('SACC_rf')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='rf')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==6){",
        "+ ",
        "      print('TSCC_rf')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='rf')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==7){",
        "+ ",
        "      print('SACC_sobol')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='sobol')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==8){",
        "+ ",
        "      print('TSCC_sobol')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='sobol')",
        "+ ",
        "    }",
        "+ ",
        "    res <- cbind(res,a)",
        "+ ",
        "    resVal <- cbind(resVal,a$y)",
        "+ ",
        "    save(list=ls(),file=paste('algo',methods,'_fun',func_index+3,'.Rdata',sep=''))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"algo5\"\n[1] \"SACC_rf\"\n[1] \"grouping\"\n",
        "randomForest 4.6-14\n",
        "Type rfNews() to see new features/changes/bug fixes.\n",
        "\n",
        "> ",
        "install.packages(\"doSNOW\")",
        "also installing the dependency ‘snow’\n\n",
        "trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.6/snow_0.4-3.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 107267 bytes (104 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 104 KB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.6/doSNOW_1.0.18.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 26634 bytes (26 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 26 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/6v/tbybj9s91474pt1p58pf82tm0000gn/T//RtmpUuEfY5/downloaded_packages\n",
        "Registered S3 method overwritten by 'sensitivity':\n  method    from \n  print.src dplyr\n",
        "> ",
        "doSNOW::registerDoSNOW(4)",
        "> ",
        "nWorker <- foreach::getDoParWorkers()",
        "> ",
        "nWorker",
        "[1] 1\n",
        "> ",
        "nWorker <- foreach::getDoParWorkers()",
        "> ",
        "nWorker",
        "[1] 1\n",
        "> ",
        "cl <- makeCluster(4, type=\"SOCK\")",
        "> ",
        "doSNOW::registerDoSNOW(cl)",
        "> ",
        "foreach::getDoParWorkers()",
        "[1] 4\n\nRestarting R session...\n\n",
        "> ",
        "library(ccoevolution2)",
        "> ",
        "for(func_index in (RSS-1)%%4+1){",
        "+ ",
        "  func <- func_set[[func_index]]",
        "+ ",
        "  res <- NULL",
        "+ ",
        "  resVal <- NULL",
        "+ ",
        "  for(qqIndex in 1:length(qq_mat)){",
        "+ ",
        "    qq <- qq_mat[qqIndex]",
        "+ ",
        "    methods <- 5",
        "+ ",
        "    seed <- ((qq-1)%/%8)*1000",
        "+ ",
        "    groupStart <- 1",
        "+ ",
        "    group <- NULL",
        "+ ",
        "    groupEnd <- 0",
        "+ ",
        "    permutation <- NULL",
        "+ ",
        "    set.seed(seed)",
        "+ ",
        "    ",
        "+ ",
        "    rotation_matrix <- matrix(numeric(1000*1000),nrow=1000)",
        "+ ",
        "    weight <- ccoevolution:::cec_weight(7)",
        "+ ",
        "    weight <- append(weight,1)",
        "+ ",
        "    ",
        "+ ",
        "    ",
        "+ ",
        "    for(i in 1:8){",
        "+ ",
        "      group <- append(group,list(groupEnd+(1:group_size[i])))",
        "+ ",
        "      permutation <- append(permutation,sample.int(group_size[i])+groupEnd)",
        "+ ",
        "      groupEnd <- groupEnd + group_size[i]",
        "+ ",
        "    }",
        "+ ",
        "    for(i in 1:7){",
        "+ ",
        "      rotation_matrix[group[[i]],group[[i]]] <- soobench:::random_rotation_matrix(group_size[i])",
        "+ ",
        "    }",
        "+ ",
        "    rotation_matrix[group[[8]],group[[8]]] <- diag(1,group_size[8])",
        "+ ",
        "    print(paste0('algo',methods))",
        "+ ",
        "    ",
        "+ ",
        "    if(methods==1){",
        "+ ",
        "      print('CCDG')",
        "+ ",
        "      a <- cc(nVar = nVar,fun=func,budget=budget,grouping_control=ctrl,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight)",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==2){",
        "+ ",
        "      print('cc_2')",
        "+ ",
        "      a <- cc_2(nVar = nVar,fun=func,budget=budget,grouping_control=ctrl,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight)",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==3){",
        "+ ",
        "      print('SACC_mustar')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='morris_mu')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==4){",
        "+ ",
        "      print('TSCC_mustar')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='morris_mu')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==5){",
        "+ ",
        "      print('SACC_rf')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='rf')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==6){",
        "+ ",
        "      print('TSCC_rf')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='rf')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==7){",
        "+ ",
        "      print('SACC_sobol')",
        "+ ",
        "      a <- SACC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='sobol')",
        "+ ",
        "    }",
        "+ ",
        "    if(methods==8){",
        "+ ",
        "      print('TSCC_sobol')",
        "+ ",
        "      a <- TSCC(nVar = nVar,fun=func,budget=budget,nLevel=4,lbound=lbound,ubound=ubound,o=optimum,rotation_matrix=rotation_matrix,permutation=permutation,weight=weight,SA_method='sobol')",
        "+ ",
        "    }",
        "+ ",
        "    res <- cbind(res,a)",
        "+ ",
        "    resVal <- cbind(resVal,a$y)",
        "+ ",
        "    save(list=ls(),file=paste('algo',methods,'_fun',func_index+3,'.Rdata',sep=''))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "[1] \"algo5\"\n[1] \"SACC_rf\"\n[1] \"grouping\"\n",
        "\n",
        "Registered S3 method overwritten by 'sensitivity':\n  method    from \n  print.src dplyr\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        3,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        2
    ]
}